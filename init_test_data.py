#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RBAC —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
from dotenv import load_dotenv
from sqlalchemy import select
from passlib.context import CryptContext

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from app.database import AsyncSessionLocal
from app.models import User, Role, Permission, Resource

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
VERBOSE_OUTPUT = os.getenv('SEED_VERBOSE', 'false').lower() == 'true'

def log_verbose(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º"""
    if VERBOSE_OUTPUT:
        print(message)

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    async with AsyncSessionLocal() as session:
        try:
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            result = await session.execute(select(Permission).limit(1))
            existing_permission = result.scalars().first()
            
            if existing_permission:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ.")
                return
            
            # 1. –°–û–ó–î–ê–ù–ò–ï –†–ï–°–£–†–°–û–í
            print("üìã –†–µ—Å—É—Ä—Å—ã...", end=" ")
            resources_data = [
                {"name": "–î–æ–∫—É–º–µ–Ω—Ç—ã", "resource_type": "documents", "description": "–°–∏—Å—Ç–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞"},
                {"name": "–û—Ç—á–µ—Ç—ã", "resource_type": "reports", "description": "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"},
                {"name": "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "resource_type": "user_profiles", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"},
                {"name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", "resource_type": "admin_panel", "description": "–ê–¥–º–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã"},
            ]
            
            resources = []
            for res_data in resources_data:
                resource = Resource(**res_data)
                session.add(resource)
                resources.append(resource)
                log_verbose(f"  ‚úÖ –†–µ—Å—É—Ä—Å: {res_data['name']}")
            print("‚úÖ")
            
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
            
            # 2. –°–û–ó–î–ê–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–ô
            print("üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è...", end=" ")
            permissions_data = [
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                {"name": "documents_read", "resource_type": "documents", "action": "read", "description": "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"},
                {"name": "documents_write", "resource_type": "documents", "action": "write", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"},
                {"name": "documents_delete", "resource_type": "documents", "action": "delete", "description": "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"},
                
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
                {"name": "reports_read", "resource_type": "reports", "action": "read", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤"},
                {"name": "reports_create", "resource_type": "reports", "action": "create", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"},
                {"name": "reports_export", "resource_type": "reports", "action": "export", "description": "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"},
                
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
                {"name": "user_profiles_read", "resource_type": "user_profiles", "action": "read", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"},
                {"name": "user_profiles_edit", "resource_type": "user_profiles", "action": "edit", "description": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"},
                
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                {"name": "admin_users_manage", "resource_type": "admin_panel", "action": "users_manage", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"},
                {"name": "admin_roles_manage", "resource_type": "admin_panel", "action": "roles_manage", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏"},
                {"name": "admin_system_config", "resource_type": "admin_panel", "action": "system_config", "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"},
            ]
            
            permissions = []
            for perm_data in permissions_data:
                permission = Permission(**perm_data)
                session.add(permission)
                permissions.append(permission)
                log_verbose(f"  ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {perm_data['name']}")
            print("‚úÖ")
            
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            
            # 3. –°–û–ó–î–ê–ù–ò–ï –†–û–õ–ï–ô
            print("üë• –†–æ–ª–∏...", end=" ")
            
            # –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤—Å–µ –ø—Ä–∞–≤–∞)
            admin_role = Role(
                name="admin",
                description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º",
                is_active=True
            )
            session.add(admin_role)
            await session.flush()
            
            # –†–æ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞)
            user_role = Role(
                name="user",
                description="–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞",
                is_active=True
            )
            session.add(user_role)
            
            # –†–æ–ª—å: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
            moderator_role = Role(
                name="moderator",
                description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏",
                is_active=True
            )
            session.add(moderator_role)
            
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            from sqlalchemy import text
            
            # –ê–¥–º–∏–Ω - –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            for perm in permissions:
                await session.execute(
                    text("INSERT INTO role_permissions (role_id, permission_id) VALUES (:role_id, :perm_id)"),
                    {"role_id": admin_role.id, "perm_id": perm.id}
                )
            log_verbose("  ‚úÖ –†–æ–ª—å: admin (–≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            user_perm_names = ["documents_read", "reports_read", "user_profiles_read", "user_profiles_edit"]
            for perm in permissions:
                if perm.name in user_perm_names:
                    await session.execute(
                        text("INSERT INTO role_permissions (role_id, permission_id) VALUES (:role_id, :perm_id)"),
                        {"role_id": user_role.id, "perm_id": perm.id}
                    )
            log_verbose("  ‚úÖ –†–æ–ª—å: user (–±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)")
            
            # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            moderator_perm_names = [
                "documents_read", "documents_write", "documents_delete",
                "reports_read", "reports_create", "reports_export", "user_profiles_read"
            ]
            for perm in permissions:
                if perm.name in moderator_perm_names:
                    await session.execute(
                        text("INSERT INTO role_permissions (role_id, permission_id) VALUES (:role_id, :perm_id)"),
                        {"role_id": moderator_role.id, "perm_id": perm.id}
                    )
            log_verbose("  ‚úÖ –†–æ–ª—å: moderator (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)")
            print("‚úÖ")
            
            # 4. –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏...", end=" ")
            
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            admin_user = User(
                email="admin@test.com",
                password_hash=pwd_context.hash("admin123"),
                first_name="–ê–¥–º–∏–Ω",
                last_name="–°–∏—Å—Ç–µ–º—ã",
                middle_name="–ì–ª–∞–≤–Ω—ã–π",
                is_active=True
            )
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            regular_user = User(
                email="user@test.com",
                password_hash=pwd_context.hash("user123"),
                first_name="–ò–≤–∞–Ω",
                last_name="–ü–µ—Ç—Ä–æ–≤",
                middle_name="–°–µ—Ä–≥–µ–µ–≤–∏—á",
                is_active=True
            )
            session.add(regular_user)
            
            # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
            moderator_user = User(
                email="moderator@test.com",
                password_hash=pwd_context.hash("moderator123"),
                first_name="–ê–Ω–Ω–∞",
                last_name="–°–º–∏—Ä–Ω–æ–≤–∞",
                middle_name="–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞",
                is_active=True
            )
            session.add(moderator_user)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏
            multi_role_user = User(
                email="manager@test.com",
                password_hash=pwd_context.hash("manager123"),
                first_name="–ï–ª–µ–Ω–∞",
                last_name="–ö–æ–∑–ª–æ–≤–∞",
                middle_name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
                is_active=True
            )
            session.add(multi_role_user)
            
            # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
            inactive_user = User(
                email="deleted@test.com",
                password_hash=pwd_context.hash("deleted123"),
                first_name="–£–¥–∞–ª–µ–Ω–Ω—ã–π",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                middle_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                is_active=False  # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            )
            session.add(inactive_user)
            session.add(admin_user)
            
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            # admin@test.com -> admin
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": admin_user.id, "role_id": admin_role.id}
            )
            log_verbose("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@test.com (—Ä–æ–ª—å: admin)")
            
            # user@test.com -> user
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": regular_user.id, "role_id": user_role.id}
            )
            log_verbose("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user@test.com (—Ä–æ–ª—å: user)")
            
            # moderator@test.com -> moderator
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": moderator_user.id, "role_id": moderator_role.id}
            )
            log_verbose("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: moderator@test.com (—Ä–æ–ª—å: moderator)")
            
            # manager@test.com -> user + moderator (–¥–≤–µ —Ä–æ–ª–∏)
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": multi_role_user.id, "role_id": user_role.id}
            )
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": multi_role_user.id, "role_id": moderator_role.id}
            )
            log_verbose("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: manager@test.com (—Ä–æ–ª–∏: user, moderator)")
            
            # deleted@test.com -> user (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
            await session.execute(
                text("INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)"),
                {"user_id": inactive_user.id, "role_id": user_role.id}
            )
            log_verbose("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: deleted@test.com (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)")
            print("‚úÖ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            if VERBOSE_OUTPUT:
                # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ verbose —Ä–µ–∂–∏–º–µ
                print("\nüìä –°–í–û–î–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
                print(f"  ‚Ä¢ –†–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
                print(f"  ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(permissions)}")
                print(f"  ‚Ä¢ –†–æ–ª–µ–π: 3 (admin, user, moderator)")
                print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 5")
                print("\nüîê –¢–ï–°–¢–û–í–´–ï –£–ß–ï–¢–ù–´–ï –ó–ê–ü–ò–°–ò:")
                print("  ‚Ä¢ admin@test.com / admin123 (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)")
                print("  ‚Ä¢ user@test.com / user123 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
                print("  ‚Ä¢ moderator@test.com / moderator123 (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)")
                print("  ‚Ä¢ manager@test.com / manager123 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)")
                print("  ‚Ä¢ deleted@test.com (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)")
            else:
                print("üîê –ì–æ—Ç–æ–≤—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: admin@test.com, user@test.com, moderator@test.com")
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            await session.close()

if __name__ == "__main__":
    if VERBOSE_OUTPUT:
        print("üéØ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RBAC —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 60)
    asyncio.run(create_test_data())
