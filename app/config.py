"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class DatabaseConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    DATABASE_URL: str = os.getenv(
        "DATABASE_URL", 
        "postgresql+asyncpg://auth_user:auth_password@localhost:5432/auth_system"
    )


class JWTConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤"""
    
    SECRET_KEY: str = os.getenv("SECRET_KEY", "your-secret-key-change-in-production")
    REFRESH_SECRET_KEY: str = os.getenv("REFRESH_SECRET_KEY", "your-refresh-secret-key-change-in-production")
    ALGORITHM: str = os.getenv("ALGORITHM", "HS256")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "30"))
    REFRESH_TOKEN_EXPIRE_DAYS: int = int(os.getenv("REFRESH_TOKEN_EXPIRE_DAYS", "7"))


class CookieConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è cookies"""
    
    COOKIE_SECURE: bool = os.getenv("COOKIE_SECURE", "false").lower() == "true"
    COOKIE_SAMESITE: str = os.getenv("COOKIE_SAMESITE", "lax")
    COOKIE_HTTPONLY: bool = os.getenv("COOKIE_HTTPONLY", "true").lower() == "true"
    
    # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @classmethod
    def get_cookie_max_age(cls) -> int:
        """–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ access cookie –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return JWTConfig.ACCESS_TOKEN_EXPIRE_MINUTES * 60
    
    @classmethod
    def get_refresh_cookie_max_age(cls) -> int:
        """–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ refresh cookie –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return JWTConfig.REFRESH_TOKEN_EXPIRE_DAYS * 24 * 60 * 60


class AppConfig:
    """–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
    APP_NAME: str = "–°–∏—Å—Ç–µ–º–∞ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    VERSION: str = "1.0.0"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    CORS_ORIGINS: list = os.getenv("CORS_ORIGINS", "http://localhost:3000,http://localhost:8080").split(",")
    
    @classmethod
    def is_production(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
        return cls.ENVIRONMENT.lower() == "production"
    
    @classmethod
    def is_development(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
        return cls.ENVIRONMENT.lower() == "development"


class Config:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    db = DatabaseConfig()
    jwt = JWTConfig()
    cookies = CookieConfig()
    app = AppConfig()
    
    @classmethod
    def validate_config(cls) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT –∫–ª—é—á–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if cls.app.is_production():
            if cls.jwt.SECRET_KEY == "your-secret-key-change-in-production":
                errors.append("SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
            
            if cls.jwt.REFRESH_SECRET_KEY == "your-refresh-secret-key-change-in-production":
                errors.append("REFRESH_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
            
            if not cls.cookies.COOKIE_SECURE:
                errors.append("COOKIE_SECURE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not cls.db.DATABASE_URL:
            errors.append("DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        
        if errors:
            print("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            for error in errors:
                print(f"  - {error}")
            return False
        
        return True
    
    @classmethod
    def print_config(cls) -> None:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
        print("=== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===\n")
        
        print("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  DATABASE_URL: {cls.db.DATABASE_URL}")
        
        print("\nüîê JWT:")
        print(f"  ALGORITHM: {cls.jwt.ALGORITHM}")
        print(f"  ACCESS_TOKEN_EXPIRE_MINUTES: {cls.jwt.ACCESS_TOKEN_EXPIRE_MINUTES}")
        print(f"  REFRESH_TOKEN_EXPIRE_DAYS: {cls.jwt.REFRESH_TOKEN_EXPIRE_DAYS}")
        print(f"  SECRET_KEY: {'***' if cls.jwt.SECRET_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        print(f"  REFRESH_SECRET_KEY: {'***' if cls.jwt.REFRESH_SECRET_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        print("\nüç™ Cookies:")
        print(f"  COOKIE_SECURE: {cls.cookies.COOKIE_SECURE}")
        print(f"  COOKIE_SAMESITE: {cls.cookies.COOKIE_SAMESITE}")
        print(f"  COOKIE_HTTPONLY: {cls.cookies.COOKIE_HTTPONLY}")
        print(f"  COOKIE_MAX_AGE: {cls.cookies.get_cookie_max_age()} —Å–µ–∫")
        print(f"  REFRESH_COOKIE_MAX_AGE: {cls.cookies.get_refresh_cookie_max_age()} —Å–µ–∫")
        
        print("\n‚öôÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print(f"  ENVIRONMENT: {cls.app.ENVIRONMENT}")
        print(f"  APP_NAME: {cls.app.APP_NAME}")
        print(f"  VERSION: {cls.app.VERSION}")
        print(f"  LOG_LEVEL: {cls.app.LOG_LEVEL}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not config.validate_config():
    raise RuntimeError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")

if __name__ == "__main__":
   config.print_config() 
